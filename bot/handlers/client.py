from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json
from aiogram.dispatcher.filters.state import State, StatesGroup

from configure import CREATOR_CHAT_ID
from create_bot import dp, bot 
from keyboards import kb_client

async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, 'Hello üëã\n'
                        'I`m a bot that allows you to take the test MBTI.\n'
                        'Send me the /test and let`s start taking it!\n'
                        'Or send me the /help command if you have a problem or forgot the commands.')
    except:
        await message.reply('–û–±—â–∞–π—Ç–µ—Å—å –≤ –õ–°:\n'
                            't.me/Myers_Briggs_Typology_bot')


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞
async def command_problem(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∞ —è –æ–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—Ç–µ–ª—é, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è.')
    await state.set_state("problem")

async def problem_state(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª:\n{message.text}")
    await state.finish()


async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏:\n"
                        "   /start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. \n"
                        "   /help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. \n"
                        "   /problem - –Ω–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    
# with open('./QandA/questions.json', 'r') as file:
#     questions = json.load(file)
class Test(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()

with open('./QandA/questions.json', 'r') as f:
    questions = json.load(f)

# @dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    Conversation's entry point
    """
    # Set state
    await Test.q1.set()

    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.add("–î–∞", "–ù–µ—Ç")

    await message.answer("–ü—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç MBTI? (–î–∞/–ù–µ—Ç)", reply_markup=keyboard_markup)

# @dp.message_handler(state=Test.q1)
async def answer_q1(message: types.Message, state: FSMContext):
    """
    Process answer for question 1
    """
    async with state.proxy() as data:
        data['q1'] = message.text

        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add(questions[0]['answer'][0], questions[0]['answer'][1])

        await Test.next()
        await message.answer(questions[0]['question'], reply_markup=keyboard_markup)

# @dp.message_handler(state=Test.q2)
async def answer_q2(message: types.Message, state: FSMContext):
    """
    Process answer for question 2
    """
    async with state.proxy() as data:
        data['q2'] = message.text

        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add(questions[1]['answer'][0], questions[1]['answer'][1])

        await Test.next()
        await message.answer(questions[1]['question'], reply_markup=keyboard_markup)

# @dp.message_handler(state=Test.q3)
async def answer_q3(message: types.Message, state: FSMContext):
    """
    Process answer for question 3
    """
    async with state.proxy() as data:
        data['q3'] = message.text

        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add(questions[2]['answer'][0], questions[2]['answer'][1])

        await Test.next()
        await message.answer(questions[2]['question'], reply_markup=keyboard_markup)

# @dp.message_handler(state=Test.q4)
async def answer_q4(message: types.Message, state: FSMContext):
    """
    Process answer for question 4
    """
    async with state.proxy() as data:
        data['q4'] = message.text

        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add(questions[3]['answer'][0], questions[3]['answer'][1])

        await Test.next()
        await message.answer(questions[3]['question'], reply_markup=keyboard_markup)


# class Mydialog(StatesGroup):
#     YorN = State()
#     answer1 = State()
#     Q2 = State()



# # async def test_state(message: types.Message, state: FSMContext):
# #     msg = message.text
# #     if msg.lower() == "–¥–∞" or msg.lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω" or msg.lower() == "—Å–æ–≥–ª–∞—Å–Ω–∞" or msg.lower() == "yes":
# #         async for i in async_generator():            
# #             q = questions[i]['question']
# #             # print(q)
# #             await bot.send_message(message.from_user.id, f'–í–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {i + 1}:\n'
# #                                                          f'{q}', reply_markup=kb_client)

# async def test_message(message: types.Message):
#     await bot.send_message(message.from_user.id, '–ù–∞—á–Ω—ë–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞—à —Ç–µ—Å—Ç?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–∞", –µ—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã.')

# async def enter_test(message: types.Message, state: FSMContext):
#     msg = message.text
#     if msg.lower() == "–¥–∞" or msg.lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω" or msg.lower() == "—Å–æ–≥–ª–∞—Å–Ω–∞" or msg.lower() == "yes":
#         await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
#         await Mydialog.YorN.set()

                             
# async def sim():
#     async def async_generator():
#         for i in range(len(questions)):
#             yield i

#     async for j in async_generator():
#         async def ques(message: types.Message, state: FSMContext):
#             q = questions[j]['question']
#             await bot.send_message(f"–í–æ–ø—Ä–æ—Å ‚Ññ{j}:\n"
#                                     f"{q}", reply_markup=kb_client[j])
#             answer = message.text
#             await state.update_data(
#                 {"answer1": answer}
#                     )
#         async def 

# async def enter_test(message: types.Message):
    # msg = message.text
    # if msg.lower() == "–¥–∞" or msg.lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω" or msg.lower() == "—Å–æ–≥–ª–∞—Å–Ω–∞" or msg.lower() == "yes":
    #     await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
    #                         f"–í–æ–ø—Ä–æ—Å ‚Ññ{async_generator(questions)}. \n\n"
    #                         "–í—ã —á–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ "
    #                         "(–±–µ—Å—Ü–µ–ª—å–Ω–æ –±–ª—É–∂–¥–∞–µ—Ç–µ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –∫–ª–∞—Ü–∞–µ—Ç–µ –ø—É–ª—å—Ç–æ–º —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–æ—Ç–æ–ª–æ–∫)?")
    #     await Mydialog.Q1.set()

# async def answer_q2(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     answer1 = data.get("answer1")
#     answer2 = message.text
#     await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!")
#     await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–Ω—ë–º'])
    dp.register_message_handler(command_problem, commands=['problem', '–ø—Ä–æ–±–ª–µ–º–∞'])
    dp.register_message_handler(help_message, commands=['help', '–ø–æ–º–æ—â—å'])
    dp.register_message_handler(problem_state, state="problem")
    dp.register_message_handler(cmd_start, commands=['test', '—Ç–µ—Å—Ç'])
    dp.register_message_handler(answer_q1, state=Test.q1)
    dp.register_message_handler(answer_q2, state=Test.q2)
    dp.register_message_handler(answer_q3, state=Test.q3)
    dp.register_message_handler(answer_q4, state=Test.q4)
