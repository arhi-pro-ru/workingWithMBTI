from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import json

from configure import CREATOR_CHAT_ID
from create_bot import dp, bot 
from keyboards import kb_client

async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, 'Hello üëã\n'
                        'I`m a bot that allows you to take the test MBTI.\n'
                        'Send me the /test and let`s start taking it!'
                        'Or send me the /help command if you have a problem or forgot the commands.')
    except:
        await message.reply('–û–±—â–∞–π—Ç–µ—Å—å –≤ –õ–°:\n'
                            't.me/Myers_Briggs_Typology_bot')


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞
async def command_problem(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∞ —è –æ–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—Ç–µ–ª—é, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è.')
    await state.set_state("problem")

async def problem_state(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª:\n{message.text}")
    await state.finish()


async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏:\n"
                        "   /start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. \n"
                        "   /help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. \n"
                        "   /problem - –Ω–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    
with open('./QandA/questions.json', 'r') as file:
    questions = json.load(file)

async def test_message(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–ù–∞—á–Ω—ë–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞—à —Ç–µ—Å—Ç?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–∞", –µ—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã.')
    await state.set_state("test")

async def some_async_generator():
    for i in range(len(questions)):
        yield i

# async def some_async_function():
#     async for i in some_async_generator():
#         print(i)

async def test_state(message: types.Message, state: FSMContext):
    msg = message.text
    if msg == "–î–∞":
        async for i in some_async_generator():            
            q = i['question']
            # print(q)
            await bot.send_message(message.from_user.id, f'–í–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä {i + 1}:\n'
                                                            f'{q}', reply_markup=kb_client)
            await state.finish()



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–Ω—ë–º'])
    dp.register_message_handler(command_problem, commands=['problem', '–ø—Ä–æ–±–ª–µ–º–∞'])
    dp.register_message_handler(help_message, commands=['help', '–ø–æ–º–æ—â—å'])
    dp.register_message_handler(problem_state, state="problem")
    dp.register_message_handler(test_message, commands=['test', '—Ç–µ—Å—Ç'])
    dp.register_message_handler(test_state, state='test')
